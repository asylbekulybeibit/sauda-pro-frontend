import { useState } from 'react';
import { motion } from 'framer-motion';
import { Warehouse } from '@/types/warehouse';
import {
  getWarehouses,
  updateWarehouse,
  deleteWarehouse,
  getShops,
} from '@/services/api';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Modal } from '@/components/ui/modal';
import { CreateWarehouseForm } from '@/components/warehouses/CreateWarehouseForm';
import { EditWarehouseForm } from '@/components/warehouses/EditWarehouseForm';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–∫–ª–∞–¥–∞
const WarehouseCard = ({ warehouse }: { warehouse: Warehouse }) => {
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const queryClient = useQueryClient();

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞–≥–∞–∑–∏–Ω–µ
  const { data: shops } = useQuery({
    queryKey: ['shops'],
    queryFn: getShops,
  });

  // –ù–∞–π—Ç–∏ –º–∞–≥–∞–∑–∏–Ω –ø–æ ID
  const shop = shops?.find((s) => s.id === warehouse.shopId);

  const updateStatusMutation = useMutation({
    mutationFn: (isActive: boolean) =>
      updateWarehouse(warehouse.id, { isActive }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['warehouses'] });
    },
  });

  const deleteMutation = useMutation({
    mutationFn: () => deleteWarehouse(warehouse.id),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['warehouses'] });
    },
  });

  const handleToggleStatus = () => {
    updateStatusMutation.mutate(!warehouse.isActive);
  };

  const handleDelete = () => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å–∫–ª–∞–¥?')) {
      deleteMutation.mutate();
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="bg-white rounded-lg shadow-sm p-6"
    >
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –¥–µ–π—Å—Ç–≤–∏—è */}
      <div className="flex justify-between items-start mb-4">
        <div>
          <h3 className="text-lg font-semibold">{warehouse.name}</h3>
          <div className="text-sm text-gray-500">
            üè≠ –°–∫–ª–∞–¥ {warehouse.isMain && '(–û—Å–Ω–æ–≤–Ω–æ–π)'}
            {shop && ` | üè™ –ú–∞–≥–∞–∑–∏–Ω: ${shop.name}`}
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <button
            onClick={() => setIsEditModalOpen(true)}
            className="p-2 text-gray-600 hover:text-indigo-600 transition-colors"
            title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
          >
            ‚úèÔ∏è
          </button>
          <button
            onClick={handleToggleStatus}
            className={`p-2 ${
              warehouse.isActive
                ? 'text-green-600 hover:text-green-700'
                : 'text-gray-400 hover:text-gray-500'
            } transition-colors`}
            title={warehouse.isActive ? '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}
          >
            {warehouse.isActive ? '‚úÖ' : '‚ùå'}
          </button>
          <button
            onClick={() => setIsDeleteModalOpen(true)}
            className="p-2 text-gray-600 hover:text-red-600 transition-colors"
            title="–£–¥–∞–ª–∏—Ç—å"
          >
            üóëÔ∏è
          </button>
        </div>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="space-y-4">
        {warehouse.address && (
          <div>
            <div className="text-sm text-gray-500">–ê–¥—Ä–µ—Å</div>
            <div>{warehouse.address}</div>
          </div>
        )}
        {warehouse.phone && (
          <div>
            <div className="text-sm text-gray-500">–¢–µ–ª–µ—Ñ–æ–Ω</div>
            <div>{warehouse.phone}</div>
          </div>
        )}
        {warehouse.email && (
          <div>
            <div className="text-sm text-gray-500">Email</div>
            <div>{warehouse.email}</div>
          </div>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
      <Modal
        isOpen={isEditModalOpen}
        onClose={() => setIsEditModalOpen(false)}
        title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞"
      >
        <EditWarehouseForm
          warehouse={warehouse}
          onClose={() => setIsEditModalOpen(false)}
        />
      </Modal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞ */}
      <Modal
        isOpen={isDeleteModalOpen}
        onClose={() => setIsDeleteModalOpen(false)}
        title="–£–¥–∞–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞"
      >
        <div className="space-y-4">
          <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å–∫–ª–∞–¥?</p>
          <div className="flex justify-end space-x-4">
            <button
              onClick={handleDelete}
              className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
            >
              –£–¥–∞–ª–∏—Ç—å
            </button>
            <button
              onClick={() => setIsDeleteModalOpen(false)}
              className="px-4 py-2 bg-gray-200 text-gray-500 rounded-lg hover:bg-gray-300 transition-colors"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
          </div>
        </div>
      </Modal>
    </motion.div>
  );
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
export default function WarehousesPage() {
  const [filter, setFilter] = useState<{
    status?: boolean;
    search?: string;
  }>({});
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);

  // –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤
  const { data: warehouses, isLoading } = useQuery({
    queryKey: ['warehouses'],
    queryFn: getWarehouses,
  });

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∫–ª–∞–¥–æ–≤
  const filteredWarehouses = warehouses?.filter((warehouse) => {
    if (filter.status !== undefined && warehouse.isActive !== filter.status)
      return false;
    if (
      filter.search &&
      !warehouse.name.toLowerCase().includes(filter.search.toLowerCase())
    )
      return false;
    return true;
  });

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-full">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –¥–µ–π—Å—Ç–≤–∏—è */}
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-900">–°–∫–ª–∞–¥—ã</h1>
        <button
          onClick={() => setIsCreateModalOpen(true)}
          className="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors duration-200"
        >
          + –°–æ–∑–¥–∞—Ç—å —Å–∫–ª–∞–¥
        </button>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div className="bg-white rounded-lg shadow-sm p-4 space-y-4">
        <div className="flex items-center space-x-4">
          {/* –ü–æ–∏—Å–∫ */}
          <div className="flex-1">
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é..."
              className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
              value={filter.search || ''}
              onChange={(e) =>
                setFilter((prev) => ({ ...prev, search: e.target.value }))
              }
            />
          </div>

          {/* –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É */}
          <select
            className="px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
            value={
              filter.status === undefined
                ? ''
                : filter.status
                ? 'active'
                : 'inactive'
            }
            onChange={(e) =>
              setFilter((prev) => ({
                ...prev,
                status:
                  e.target.value === ''
                    ? undefined
                    : e.target.value === 'active',
              }))
            }
          >
            <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
            <option value="active">–ê–∫—Ç–∏–≤–Ω—ã–µ</option>
            <option value="inactive">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ</option>
          </select>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ */}
      <div className="grid grid-cols-1 gap-6">
        {filteredWarehouses?.map((warehouse) => (
          <WarehouseCard key={warehouse.id} warehouse={warehouse} />
        ))}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–ª–∞–¥–∞ */}
      <Modal
        isOpen={isCreateModalOpen}
        onClose={() => setIsCreateModalOpen(false)}
        title="–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∫–ª–∞–¥–∞"
      >
        <CreateWarehouseForm onClose={() => setIsCreateModalOpen(false)} />
      </Modal>
    </div>
  );
}

import { useState } from 'react';
import { motion } from 'framer-motion';
import { Shop, ShopType } from '@/types/shop';
import { getShops, updateShop, deleteShop } from '@/services/api';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Modal } from '@/components/ui/modal';
import { CreateProjectForm } from '@/components/projects/CreateProjectForm';
import { EditProjectForm } from '@/components/projects/EditProjectForm';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–µ–∫—Ç–∞
const UserRoleCard = ({ type, user }: Shop['userRoles'][0]) => {
  const roleEmoji = {
    owner: 'üëî',
    manager: 'üë®‚Äçüíº',
    cashier: 'üí∞',
  }[type];

  const roleName = {
    owner: '–í–ª–∞–¥–µ–ª–µ—Ü',
    manager: '–ú–µ–Ω–µ–¥–∂–µ—Ä',
    cashier: '–ö–∞—Å—Å–∏—Ä',
  }[type];

  return (
    <div className="flex items-center space-x-2 text-sm">
      <span>{roleEmoji}</span>
      <span className="text-gray-500">{roleName}:</span>
      <span className="font-medium">
        {user.firstName} {user.lastName}
      </span>
      <span className="text-gray-500">({user.phone})</span>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
const ProjectCard = ({ project }: { project: Shop }) => {
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const queryClient = useQueryClient();

  const updateStatusMutation = useMutation({
    mutationFn: (isActive: boolean) => updateShop(project.id, { isActive }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['shops'] });
    },
  });

  const deleteMutation = useMutation({
    mutationFn: () => deleteShop(project.id),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['shops'] });
    },
  });

  const handleToggleStatus = () => {
    updateStatusMutation.mutate(!project.isActive);
  };

  const handleDelete = () => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç?')) {
      deleteMutation.mutate();
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="bg-white rounded-lg shadow-sm p-6"
    >
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –¥–µ–π—Å—Ç–≤–∏—è */}
      <div className="flex justify-between items-start mb-4">
        <div>
          <h3 className="text-lg font-semibold">{project.name}</h3>
          <div className="text-sm text-gray-500">
            {project.type === 'shop' && 'üè™ –ú–∞–≥–∞–∑–∏–Ω'}
            {project.type === 'warehouse' && 'üè≠ –°–∫–ª–∞–¥'}
            {project.type === 'point_of_sale' && 'üí≥ –¢–æ—á–∫–∞ –ø—Ä–æ–¥–∞–∂'}
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <button
            onClick={() => setIsEditModalOpen(true)}
            className="p-2 text-gray-600 hover:text-indigo-600 transition-colors"
            title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
          >
            ‚úèÔ∏è
          </button>
          <button
            onClick={handleToggleStatus}
            className={`p-2 ${
              project.isActive
                ? 'text-green-600 hover:text-green-700'
                : 'text-gray-400 hover:text-gray-500'
            } transition-colors`}
            title={project.isActive ? '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}
          >
            {project.isActive ? '‚úÖ' : '‚ùå'}
          </button>
          <button
            onClick={() => setIsDeleteModalOpen(true)}
            className="p-2 text-gray-600 hover:text-red-600 transition-colors"
            title="–£–¥–∞–ª–∏—Ç—å"
          >
            üóëÔ∏è
          </button>
        </div>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="space-y-4">
        {project.address && (
          <div>
            <div className="text-sm text-gray-500">–ê–¥—Ä–µ—Å</div>
            <div>{project.address}</div>
          </div>
        )}
        {project.phone && (
          <div>
            <div className="text-sm text-gray-500">–¢–µ–ª–µ—Ñ–æ–Ω</div>
            <div>{project.phone}</div>
          </div>
        )}
      </div>

      {/* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ */}
      {project.userRoles.length > 0 && (
        <div className="mt-4">
          <div className="text-sm font-medium text-gray-500 mb-2">
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
          </div>
          <div className="space-y-2">
            {project.userRoles
              .filter((userRole) => userRole.isActive)
              .map((userRole) => (
                <UserRoleCard key={userRole.id} {...userRole} />
              ))}
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
      <Modal
        isOpen={isEditModalOpen}
        onClose={() => setIsEditModalOpen(false)}
        title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"
      >
        <EditProjectForm
          project={project}
          onClose={() => setIsEditModalOpen(false)}
        />
      </Modal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ */}
      <Modal
        isOpen={isDeleteModalOpen}
        onClose={() => setIsDeleteModalOpen(false)}
        title="–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"
      >
        <div className="space-y-4">
          <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç?</p>
          <div className="flex justify-end space-x-4">
            <button
              onClick={handleDelete}
              className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
            >
              –£–¥–∞–ª–∏—Ç—å
            </button>
            <button
              onClick={() => setIsDeleteModalOpen(false)}
              className="px-4 py-2 bg-gray-200 text-gray-500 rounded-lg hover:bg-gray-300 transition-colors"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
          </div>
        </div>
      </Modal>
    </motion.div>
  );
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
export default function ProjectsPage() {
  const [filter, setFilter] = useState<{
    type?: ShopType;
    status?: boolean;
    search?: string;
  }>({});
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);

  // –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
  const { data: projects, isLoading } = useQuery({
    queryKey: ['shops'],
    queryFn: getShops,
  });

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
  const filteredProjects = projects?.filter((project) => {
    if (filter.type && project.type !== filter.type) return false;
    if (filter.status !== undefined && project.isActive !== filter.status)
      return false;
    if (
      filter.search &&
      !project.name.toLowerCase().includes(filter.search.toLowerCase())
    )
      return false;
    return true;
  });

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-full">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –¥–µ–π—Å—Ç–≤–∏—è */}
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-900">–ü—Ä–æ–µ–∫—Ç—ã</h1>
        <button
          onClick={() => setIsCreateModalOpen(true)}
          className="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors duration-200"
        >
          + –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
        </button>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div className="bg-white rounded-lg shadow-sm p-4 space-y-4">
        <div className="flex items-center space-x-4">
          {/* –ü–æ–∏—Å–∫ */}
          <div className="flex-1">
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é..."
              className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
              value={filter.search || ''}
              onChange={(e) =>
                setFilter((prev) => ({ ...prev, search: e.target.value }))
              }
            />
          </div>

          {/* –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É */}
          <select
            className="px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
            value={filter.type || ''}
            onChange={(e) =>
              setFilter((prev) => ({
                ...prev,
                type: e.target.value as ShopType | undefined,
              }))
            }
          >
            <option value="">–í—Å–µ —Ç–∏–ø—ã</option>
            <option value={ShopType.SHOP}>–ú–∞–≥–∞–∑–∏–Ω—ã</option>
            <option value={ShopType.WAREHOUSE}>–°–∫–ª–∞–¥—ã</option>
            <option value={ShopType.POINT_OF_SALE}>–¢–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂</option>
          </select>

          {/* –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É */}
          <select
            className="px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
            value={
              filter.status === undefined
                ? ''
                : filter.status
                ? 'active'
                : 'inactive'
            }
            onChange={(e) =>
              setFilter((prev) => ({
                ...prev,
                status:
                  e.target.value === ''
                    ? undefined
                    : e.target.value === 'active',
              }))
            }
          >
            <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
            <option value="active">–ê–∫—Ç–∏–≤–Ω—ã–µ</option>
            <option value="inactive">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ</option>
          </select>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ */}
      <div className="grid grid-cols-1 gap-6">
        {filteredProjects?.map((project) => (
          <ProjectCard key={project.id} project={project} />
        ))}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ */}
      <Modal
        isOpen={isCreateModalOpen}
        onClose={() => setIsCreateModalOpen(false)}
        title="–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"
      >
        <CreateProjectForm onClose={() => setIsCreateModalOpen(false)} />
      </Modal>
    </div>
  );
}

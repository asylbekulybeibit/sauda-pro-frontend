import { useState } from 'react';
import { motion } from 'framer-motion';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { getInvites, cancelInvite } from '@/services/api';
import { Modal } from '@/components/ui/modal';
import { CreateInviteForm } from '@/components/invites/CreateInviteForm';
import { formatPhoneNumber } from '@/utils/phone';
import { Invite } from '@/types/invite';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–Ω–≤–∞–π—Ç–∞
const InviteCard = ({ invite }: { invite: Invite }) => {
  const queryClient = useQueryClient();

  const cancelMutation = useMutation({
    mutationFn: () => cancelInvite(invite.id),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['invites'] });
    },
  });

  const handleCancel = () => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –∏–Ω–≤–∞–π—Ç?')) {
      cancelMutation.mutate();
    }
  };

  const getRoleEmoji = (role: string) => {
    switch (role) {
      case 'owner':
        return 'üëî';
      case 'manager':
        return 'üë®‚Äçüíº';
      case 'cashier':
        return 'üí∞';
      default:
        return 'üë§';
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="bg-white rounded-lg shadow-sm p-6 space-y-4"
    >
      {/* –°—Ç–∞—Ç—É—Å –∏ –¥–µ–π—Å—Ç–≤–∏—è */}
      <div className="flex justify-between items-start">
        <div className="space-y-1">
          <div className="text-sm text-gray-500">–°—Ç–∞—Ç—É—Å</div>
          <div
            className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
              invite.isAccepted
                ? 'bg-green-100 text-green-800'
                : 'bg-yellow-100 text-yellow-800'
            }`}
          >
            {invite.isAccepted ? '–ü—Ä–∏–Ω—è—Ç' : '–û–∂–∏–¥–∞–µ—Ç'}
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="text-2xl">{getRoleEmoji(invite.role)}</div>
          {!invite.isAccepted && (
            <button
              onClick={handleCancel}
              className="p-2 text-gray-600 hover:text-red-600 transition-colors"
              title="–û—Ç–º–µ–Ω–∏—Ç—å –∏–Ω–≤–∞–π—Ç"
              disabled={cancelMutation.isPending}
            >
              ‚ùå
            </button>
          )}
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="grid grid-cols-2 gap-4">
        <div>
          <div className="text-sm text-gray-500">–¢–µ–ª–µ—Ñ–æ–Ω</div>
          <div className="font-medium">{formatPhoneNumber(invite.phone)}</div>
        </div>
        {invite.email && (
          <div>
            <div className="text-sm text-gray-500">Email</div>
            <div className="font-medium">{invite.email}</div>
          </div>
        )}
      </div>

      {/* –ü—Ä–æ–µ–∫—Ç */}
      <div>
        <div className="text-sm text-gray-500">–ü—Ä–æ–µ–∫—Ç</div>
        <div className="font-medium">{invite.shop.name}</div>
      </div>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="grid grid-cols-2 gap-4 pt-2 border-t">
        <div>
          <div className="text-sm text-gray-500">–°–æ–∑–¥–∞–Ω</div>
          <div className="text-sm">
            {new Date(invite.createdAt).toLocaleDateString()}
          </div>
        </div>
        <div>
          <div className="text-sm text-gray-500">–°–æ–∑–¥–∞–ª</div>
          <div className="text-sm">
            {invite.createdBy.firstName} {invite.createdBy.lastName}
          </div>
        </div>
      </div>
    </motion.div>
  );
};

export default function InvitesPage() {
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [filter, setFilter] = useState<{
    status?: boolean;
    search?: string;
  }>({});

  // –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∏–Ω–≤–∞–π—Ç–æ–≤
  const { data: invites, isLoading } = useQuery({
    queryKey: ['invites'],
    queryFn: getInvites,
  });

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–Ω–≤–∞–π—Ç–æ–≤
  const filteredInvites = invites?.filter((invite) => {
    if (filter.status !== undefined && invite.isAccepted !== filter.status)
      return false;
    if (
      filter.search &&
      !invite.phone.toLowerCase().includes(filter.search.toLowerCase()) &&
      !invite.email?.toLowerCase().includes(filter.search.toLowerCase())
    )
      return false;
    return true;
  });

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-full">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –¥–µ–π—Å—Ç–≤–∏—è */}
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-900">–ò–Ω–≤–∞–π—Ç—ã</h1>
        <button
          onClick={() => setIsCreateModalOpen(true)}
          className="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors duration-200"
        >
          + –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω–≤–∞–π—Ç
        </button>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div className="bg-white rounded-lg shadow-sm p-4 space-y-4">
        <div className="flex items-center space-x-4">
          {/* –ü–æ–∏—Å–∫ */}
          <div className="flex-1">
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ email..."
              className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
              value={filter.search || ''}
              onChange={(e) =>
                setFilter((prev) => ({ ...prev, search: e.target.value }))
              }
            />
          </div>

          {/* –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É */}
          <select
            className="px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
            value={
              filter.status === undefined
                ? ''
                : filter.status
                ? 'accepted'
                : 'pending'
            }
            onChange={(e) =>
              setFilter((prev) => ({
                ...prev,
                status:
                  e.target.value === ''
                    ? undefined
                    : e.target.value === 'accepted',
              }))
            }
          >
            <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
            <option value="accepted">–ü—Ä–∏–Ω—è—Ç—ã–µ</option>
            <option value="pending">–û–∂–∏–¥–∞—é—â–∏–µ</option>
          </select>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –∏–Ω–≤–∞–π—Ç–æ–≤ */}
      <div className="grid grid-cols-1 gap-6">
        {filteredInvites?.map((invite) => (
          <InviteCard key={invite.id} invite={invite} />
        ))}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–∞–π—Ç–∞ */}
      <Modal
        isOpen={isCreateModalOpen}
        onClose={() => setIsCreateModalOpen(false)}
        title="–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–∞–π—Ç–∞"
      >
        <CreateInviteForm onClose={() => setIsCreateModalOpen(false)} />
      </Modal>
    </div>
  );
}

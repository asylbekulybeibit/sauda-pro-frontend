import { motion } from 'framer-motion';
import { useNavigate } from 'react-router-dom';
import { useQuery } from '@tanstack/react-query';
import { PersonalInfoForm } from '@/components/profile/PersonalInfoForm';
import PendingInvites from '@/components/invites/PendingInvites';
import { useRoleStore } from '@/store/roleStore';
import { useAuthStore } from '@/store/authStore';
import { getProfile } from '@/services/api';
import { RoleType, UserRoleDetails } from '@/types/role';

export default function ProfilePage() {
  const { setCurrentRole } = useRoleStore();
  const { logout } = useAuthStore();
  const navigate = useNavigate();

  const { data: profile, isLoading } = useQuery({
    queryKey: ['profile'],
    queryFn: getProfile,
  });

  const handleRoleSelect = (role: 'superadmin' | UserRoleDetails) => {
    if (role === 'superadmin') {
      setCurrentRole({ type: 'superadmin' });
      navigate('/admin');
    } else {
      setCurrentRole({
        type: 'shop',
        id: role.shop.id,
        role: role.type,
        shop: {
          id: role.shop.id,
          name: role.shop.name,
          type: role.shop.type || 'shop',
          address: role.shop.address,
        },
        warehouse: role.warehouse
          ? {
              id: role.warehouse.id,
              name: role.warehouse.name,
              address: role.warehouse.address,
            }
          : undefined,
      });
      if (role.type === RoleType.OWNER) {
        navigate(`/owner/${role.shop.id}`);
      } else if (role.type === RoleType.CASHIER) {
        navigate(`/cashier/${role.shop.id}`);
      } else {
        navigate(`/manager/${role.shop.id}`);
      }
    }
  };

  const handleLogout = () => {
    logout();
    navigate('/login');
  };

  const renderRole = (role: UserRoleDetails) => (
    <motion.div
      key={role.id}
      whileHover={{ scale: 1.02 }}
      whileTap={{ scale: 0.98 }}
      onClick={() => handleRoleSelect(role)}
      className="bg-white rounded-lg shadow-sm p-6 cursor-pointer border border-gray-200 hover:border-violet-300 hover:shadow-md transition-all"
    >
      <div className="flex items-center justify-between">
        <div>
          {role.warehouse ? (
            <h3 className="text-lg font-semibold">üè≠ {role.warehouse.name}</h3>
          ) : (
            <h3 className="text-lg font-semibold">{role.shop.name}</h3>
          )}

          {role.shop.address && !role.warehouse && (
            <p className="text-gray-500">üìç {role.shop.address}</p>
          )}

          {role.warehouse && role.warehouse.address && (
            <p className="text-gray-500">üìç {role.warehouse.address}</p>
          )}

          <div className="flex items-center gap-2 mt-2">
            <span className="text-2xl">
              {role.type === 'owner'
                ? 'üëî'
                : role.type === 'manager'
                ? 'üë®‚Äçüíº'
                : 'üí∞'}
            </span>
            <span className="text-lg">
              {role.type === 'owner'
                ? '–í–ª–∞–¥–µ–ª–µ—Ü'
                : role.type === 'manager'
                ? '–ú–µ–Ω–µ–¥–∂–µ—Ä'
                : '–ö–∞—Å—Å–∏—Ä'}
            </span>
          </div>
        </div>
      </div>
    </motion.div>
  );

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –µ–≥–æ —Ä–æ–ª–µ–π
  const renderShopWithRoles = (shopId: string, roles: UserRoleDetails[]) => {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ –∏–∑ –ø–µ—Ä–≤–æ–π —Ä–æ–ª–∏
    const shopInfo = roles[0].shop;

    // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    const ownerRole = roles.find((role) => role.type === RoleType.OWNER);

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–æ–ª–∏, –≥–¥–µ —É –Ω–∞—Å –Ω–µ—Ç —Å–∫–ª–∞–¥–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
    const shopRoles = roles.filter((role) => !role.warehouse);

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–æ–ª–∏, –≥–¥–µ —É –Ω–∞—Å –µ—Å—Ç—å —Å–∫–ª–∞–¥
    const warehouseRoles = roles.filter((role) => role.warehouse);

    return (
      <div
        key={shopId}
        className="bg-white rounded-lg shadow-sm p-6 border border-gray-200 mb-4"
      >
        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–æ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ */}
        {ownerRole && (
          <h3 className="text-lg font-semibold mb-4">{shopInfo.name}</h3>
        )}

        <div className={`space-y-4 ${!ownerRole ? 'mt-0' : ''}`}>
          {/* –°–Ω–∞—á–∞–ª–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–æ–ª–∏ –±–µ–∑ —Å–∫–ª–∞–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–ª–∞–¥–µ–ª–µ—Ü) */}
          {shopRoles.map((role) => renderRole(role))}

          {/* –ó–∞—Ç–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–æ–ª–∏ —Å–æ —Å–∫–ª–∞–¥–∞–º–∏ */}
          {warehouseRoles.map((role) => renderRole(role))}
        </div>
      </div>
    );
  };

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–æ–ª–µ–π
  const prepareRolesForDisplay = (roles: UserRoleDetails[]) => {
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–æ–ª–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
    const groupedByShop: { [shopId: string]: UserRoleDetails[] } = {};

    roles.forEach((role) => {
      if (!groupedByShop[role.shop.id]) {
        groupedByShop[role.shop.id] = [];
      }
      groupedByShop[role.shop.id].push(role);
    });

    // –†–æ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const displayItems: React.ReactNode[] = [];

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    Object.keys(groupedByShop).forEach((shopId) => {
      const rolesInShop = groupedByShop[shopId];
      const ownerRole = rolesInShop.find(
        (role) => role.type === RoleType.OWNER
      );

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–æ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞, –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –≤ –æ–±—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É
      if (ownerRole) {
        displayItems.push(
          <div
            key={shopId}
            className="bg-white rounded-lg shadow-sm p-6 border border-gray-200 mb-4"
          >
            <h3 className="text-lg font-semibold mb-4">
              {ownerRole.shop.name}
            </h3>
            <div className="space-y-4">
              {rolesInShop.map((role) => renderRole(role))}
            </div>
          </div>
        );
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–æ–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ä–æ–ª—å –æ—Ç–¥–µ–ª—å–Ω–æ
        rolesInShop.forEach((role) => {
          displayItems.push(renderRole(role));
        });
      }
    });

    return displayItems;
  };

  if (isLoading) {
    return (
      <div className="min-h-screen flex justify-center items-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-violet-600" />
      </div>
    );
  }

  // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–ª–∏
  const activeRoles = profile?.roles?.filter((role) => role.isActive) || [];
  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const rolesToDisplay = prepareRolesForDisplay(activeRoles);

  return (
    <div className="min-h-screen bg-white relative overflow-hidden">
      {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω */}
      <div className="absolute inset-0 -z-10">
        <div className="absolute top-0 -left-4 w-[1000px] h-[1000px] bg-violet-200 rounded-full mix-blend-multiply filter blur-3xl opacity-30" />
        <div className="absolute top-0 -right-4 w-[1000px] h-[1000px] bg-yellow-200 rounded-full mix-blend-multiply filter blur-3xl opacity-30" />
        <div className="absolute -bottom-8 left-20 w-[1000px] h-[1000px] bg-pink-200 rounded-full mix-blend-multiply filter blur-3xl opacity-30" />
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="max-w-[1600px] mx-auto p-8">
        <div className="flex flex-col lg:flex-row gap-8">
          {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è */}
          <div className="lg:w-1/4">
            <div className="bg-white rounded-lg shadow-sm p-6 border border-gray-200">
              <h1 className="text-2xl font-bold mb-6 flex justify-between items-center">
                –ü—Ä–æ—Ñ–∏–ª—å
                <button onClick={handleLogout} className="text-red-600 text-sm">
                  –í—ã–π—Ç–∏ üö™
                </button>
              </h1>
              <PersonalInfoForm />
            </div>
          </div>

          {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–µ–∫—Ç—ã */}
          <div className="lg:w-1/2 space-y-8">
            {profile?.isSuperAdmin && (
              <div className="bg-white rounded-lg shadow-sm p-6 border border-gray-200">
                <h2 className="text-xl font-semibold mb-4">
                  –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
                </h2>
                <motion.button
                  onClick={() => handleRoleSelect('superadmin')}
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  className="w-full bg-violet-600 hover:bg-violet-700 text-white rounded-xl p-6 shadow-sm cursor-pointer transition-colors"
                >
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="text-lg font-semibold">
                        –ü–∞–Ω–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
                      </h3>
                      <p className="text-violet-100">
                        –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–æ–π
                      </p>
                    </div>
                    <span className="text-2xl">üëë</span>
                  </div>
                </motion.button>
              </div>
            )}

            {profile?.roles && profile.roles.length > 0 && (
              <div className="bg-white rounded-lg shadow-sm p-6 border border-gray-200">
                <h2 className="text-xl font-semibold mb-4">–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã</h2>
                <div className="space-y-4">
                  {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏ */}
                  {rolesToDisplay}
                </div>
              </div>
            )}
          </div>

          {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è */}
          <div className="lg:w-1/4">
            <PendingInvites />
          </div>
        </div>
      </div>
    </div>
  );
}

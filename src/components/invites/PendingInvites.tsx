import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { motion } from 'framer-motion';
import { getPendingInvites, acceptInvite, rejectInvite } from '@/services/api';
import { formatPhoneNumber } from '@/utils/phone';
import { Invite } from '@/types/invite';

const PendingInviteCard = ({ invite }: { invite: Invite }) => {
  const queryClient = useQueryClient();

  const acceptMutation = useMutation({
    mutationFn: () => acceptInvite(invite.id),
    onSuccess: async () => {
      // –°–Ω–∞—á–∞–ª–∞ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã
      await Promise.all([
        queryClient.invalidateQueries({ queryKey: ['pendingInvites'] }),
        queryClient.invalidateQueries({ queryKey: ['profile'] }),
        queryClient.invalidateQueries({ queryKey: ['userRoles'] }),
      ]);

      // –ó–∞—Ç–µ–º –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ç—á–∞ –ø—Ä–æ—Ñ–∏–ª—è
      await queryClient.refetchQueries({ queryKey: ['profile'] });
    },
  });

  const rejectMutation = useMutation({
    mutationFn: () => rejectInvite(invite.id),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['pendingInvites'] });
    },
  });

  const getRoleEmoji = (role: string) => {
    switch (role) {
      case 'owner':
        return 'üëî';
      case 'manager':
        return 'üë®‚Äçüíº';
      case 'cashier':
        return 'üí∞';
      default:
        return 'üë§';
    }
  };

  const getRoleName = (role: string) => {
    switch (role) {
      case 'owner':
        return '–í–ª–∞–¥–µ–ª–µ—Ü';
      case 'manager':
        return '–ú–µ–Ω–µ–¥–∂–µ—Ä';
      case 'cashier':
        return '–ö–∞—Å—Å–∏—Ä';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å';
    }
  };

  const handleAccept = () => {
    if (
      window.confirm(
        '–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ? –í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—É.'
      )
    ) {
      acceptMutation.mutate();
    }
  };

  const handleReject = () => {
    if (
      window.confirm('–û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')
    ) {
      rejectMutation.mutate();
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="bg-white rounded-lg shadow-sm p-6 space-y-4"
    >
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ä–æ–ª—å */}
      <div className="flex justify-between items-start">
        <div className="space-y-1">
          <div className="text-lg font-medium">–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç</div>
          <div className="text-sm text-gray-500">
            –æ—Ç {invite.createdBy.firstName} {invite.createdBy.lastName}
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <span className="text-2xl">{getRoleEmoji(invite.role)}</span>
          <span className="text-sm font-medium text-gray-700">
            {getRoleName(invite.role)}
          </span>
        </div>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ */}
      <div>
        <div className="text-sm text-gray-500">–ü—Ä–æ–µ–∫—Ç</div>
        <div className="font-medium">{invite.shop.name}</div>
      </div>

      {/* –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è */}
      <div className="text-sm text-gray-500">
        –°–æ–∑–¥–∞–Ω–æ: {new Date(invite.createdAt).toLocaleDateString()}
      </div>

      {/* –î–µ–π—Å—Ç–≤–∏—è */}
      <div className="flex space-x-4 pt-4">
        <button
          onClick={handleAccept}
          disabled={acceptMutation.isPending || rejectMutation.isPending}
          className="flex-1 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors duration-200 disabled:opacity-50"
        >
          {acceptMutation.isPending ? '–ü—Ä–∏–Ω—è—Ç–∏–µ...' : '–ü—Ä–∏–Ω—è—Ç—å'}
        </button>
        <button
          onClick={handleReject}
          disabled={acceptMutation.isPending || rejectMutation.isPending}
          className="flex-1 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors duration-200 disabled:opacity-50"
        >
          {rejectMutation.isPending ? '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ...' : '–û—Ç–∫–ª–æ–Ω–∏—Ç—å'}
        </button>
      </div>
    </motion.div>
  );
};

export default function PendingInvites() {
  const { data: invites, isLoading } = useQuery({
    queryKey: ['pendingInvites'],
    queryFn: getPendingInvites,
  });

  if (isLoading) {
    return (
      <div className="flex justify-center items-center py-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600" />
      </div>
    );
  }

  if (!invites?.length) {
    return null;
  }

  return (
    <div className="space-y-6 mb-8">
      <h2 className="text-xl font-semibold text-gray-900">
        –û–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è ({invites.length})
      </h2>
      <div className="grid grid-cols-1 gap-6">
        {invites.map((invite) => (
          <PendingInviteCard key={invite.id} invite={invite} />
        ))}
      </div>
    </div>
  );
}

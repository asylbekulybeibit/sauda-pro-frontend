import axios from 'axios';
import { UserRoleDetails } from '@/types/role';
import { Shop, CreateShopDto, UpdateShopDto } from '@/types/shop';
import {
  Warehouse,
  CreateWarehouseDto,
  UpdateWarehouseDto,
} from '@/types/warehouse';
import { Invite, CreateInviteDto } from '@/types/invite';
import { User, UpdateUserDto } from '@/types/user';
import { DashboardStats } from '@/types/dashboard';
import { useAuthStore } from '@/store/authStore';
import { cleanFormData } from '@/utils/form';

export const api = axios.create({
  baseURL: 'http://localhost:3000',
  withCredentials: true,
  headers: {
    'Content-Type': 'application/json',
  },
});

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
api.interceptors.request.use(
  (config) => {
    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', {
      url: config.url,
      method: config.method,
      data: config.data,
      headers: config.headers,
    });
    const token = localStorage.getItem('accessToken');
    console.log('üîë –¢–æ–∫–µ–Ω –∏–∑ localStorage:', token);

    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
      console.log(
        'üîí –î–æ–±–∞–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization:',
        config.headers.Authorization
      );
    } else {
      console.warn('‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage');
    }
    return config;
  },
  (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
    return Promise.reject(error);
  }
);

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
api.interceptors.response.use(
  (response) => {
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', {
      url: response.config.url,
      status: response.status,
      data: response.data,
    });
    return response;
  },
  (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞:', {
      url: error.config?.url,
      status: error.response?.status,
      data: error.response?.data,
    });
    if (error.response?.status === 401) {
      // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      localStorage.removeItem('accessToken');
      localStorage.removeItem('refreshToken');
      useAuthStore.getState().logout();

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
      window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
interface GenerateOTPResponse {
  message: string;
}

interface VerifyOTPResponse {
  accessToken: string;
  message: string;
}

interface Profile {
  id: string;
  phone: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  isSuperAdmin: boolean;
  roles: UserRoleDetails[];
}

// –ú–µ—Ç–æ–¥—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const generateOTP = async (
  phone: string
): Promise<GenerateOTPResponse> => {
  console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é OTP:', {
    phone,
    phoneLength: phone.length,
    phoneFormat: phone.match(/^\+7\d{10}$/) ? '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π' : '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π',
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
  if (!phone.match(/^\+7\d{10}$/)) {
    throw new Error(
      `–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞: ${phone}. –û–∂–∏–¥–∞–µ—Ç—Å—è: +7XXXXXXXXXX`
    );
  }

  const response = await api.post('/auth/otp/generate', { phone });
  return response.data;
};

export const verifyOTP = async (
  phone: string,
  code: string
): Promise<VerifyOTPResponse> => {
  const response = await api.post('/auth/otp/verify', { phone, code });
  return response.data;
};

// –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
export const updateProfile = async (data: {
  firstName?: string;
  lastName?: string;
  email?: string;
}): Promise<Profile> => {
  const response = await api.patch('/profile', data);
  return response.data;
};

export const getProfile = async (): Promise<Profile> => {
  const response = await api.get('/profile');
  return response.data;
};

// –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
export const getShops = async (): Promise<Shop[]> => {
  const response = await api.get('/shops');
  return response.data;
};

export const getShop = async (id: string): Promise<Shop> => {
  const response = await api.get(`/shops/${id}`);
  return response.data;
};

export const createShop = async (data: CreateShopDto): Promise<Shop> => {
  const response = await api.post('/shops', data);
  return response.data;
};

export const updateShop = async (
  id: string,
  data: UpdateShopDto
): Promise<Shop> => {
  const response = await api.patch(`/shops/${id}`, data);
  return response.data;
};

export const deleteShop = async (id: string): Promise<void> => {
  await api.delete(`/shops/${id}`);
};

// –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–∫–ª–∞–¥–∞–º–∏
export const getWarehouses = async (): Promise<Warehouse[]> => {
  const response = await api.get('/warehouses');
  return response.data;
};

export const getWarehouse = async (id: string): Promise<Warehouse> => {
  const response = await api.get(`/warehouses/${id}`);
  return response.data;
};

export const createWarehouse = async (
  data: CreateWarehouseDto
): Promise<Warehouse> => {
  const response = await api.post('/warehouses', data);
  return response.data;
};

export const updateWarehouse = async (
  id: string,
  data: UpdateWarehouseDto
): Promise<Warehouse> => {
  const response = await api.patch(`/warehouses/${id}`, data);
  return response.data;
};

export const deleteWarehouse = async (id: string): Promise<void> => {
  await api.delete(`/warehouses/${id}`);
};

// –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω–≤–∞–π—Ç–∞–º–∏
export const getInvites = async (): Promise<Invite[]> => {
  const response = await api.get('/invites');
  return response.data;
};

export const createInvite = async (data: CreateInviteDto): Promise<Invite> => {
  const cleanedData = cleanFormData(data);
  const response = await api.post('/invites', cleanedData);
  return response.data;
};

export const acceptInvite = async (id: string): Promise<Invite> => {
  const response = await api.post(`/invites/${id}/accept`);
  return response.data;
};

export const cancelInvite = async (id: string): Promise<void> => {
  await api.patch(`/invites/${id}/cancel`);
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –∏–Ω–≤–∞–π—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getPendingInvites = async (): Promise<Invite[]> => {
  const response = await api.get('/invites/pending');
  return response.data;
};

// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∏–Ω–≤–∞–π—Ç–∞
export const rejectInvite = async (inviteId: string): Promise<void> => {
  await api.post(`/invites/${inviteId}/reject`);
};

// –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
export const getUsers = async (): Promise<User[]> => {
  const response = await api.get('/admin/users');
  return response.data;
};

export const getUser = async (id: string): Promise<User> => {
  const response = await api.get(`/admin/users/${id}`);
  return response.data;
};

export const updateUser = async (
  id: string,
  data: UpdateUserDto
): Promise<User> => {
  const response = await api.patch(`/admin/users/${id}`, data);
  return response.data;
};

export const deleteUser = async (id: string): Promise<void> => {
  await api.delete(`/admin/users/${id}`);
};

// –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
export const getDashboardStats = async (): Promise<DashboardStats> => {
  const { data } = await api.get('/dashboard/stats');
  return data;
};

// –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
export const getShopStaff = async (): Promise<UserRoleDetails[]> => {
  const response = await api.get('/users/staff');
  return response.data;
};

export const removeStaffMember = async (staffId: string): Promise<void> => {
  await api.patch(`/users/staff/${staffId}/deactivate`);
};
